# ===================================================================
# ExaPG Docker Compose High Availability Stack
# ===================================================================
# ARCHITECTURE FIX: Drastically simplified from 395 lines to ~150 lines
# Date: 2024-05-24
#
# Usage: 
#   docker-compose -f docker-compose.yml -f docker-compose.ha.yml up
#   docker-compose -f docker-compose.yml -f docker-compose.ha.yml up --profile replication
# ===================================================================

version: '3.8'

services:
  # ===================================================================
  # SERVICE DISCOVERY & COORDINATION
  # ===================================================================

  # etcd for service discovery and configuration management
  etcd:
    image: quay.io/coreos/etcd:v3.5.10
    container_name: ${CONTAINER_NAME:-exapg}-etcd
    hostname: etcd
    profiles:
      - ha
      - coordination
    command:
      - etcd
      - --name=etcd-single
      - --data-dir=/etcd-data
      - --advertise-client-urls=http://etcd:2379
      - --listen-client-urls=http://0.0.0.0:2379
      - --initial-advertise-peer-urls=http://etcd:2380
      - --listen-peer-urls=http://0.0.0.0:2380
      - --initial-cluster=etcd-single=http://etcd:2380
      - --initial-cluster-state=new
      - --initial-cluster-token=exapg-etcd-cluster
      - --log-level=warn

    volumes:
      - etcd_data:/etcd-data

    ports:
      - "${ETCD_PORT:-2379}:2379"
      - "${ETCD_PEER_PORT:-2380}:2380"

    networks:
      - exapg-network

    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ===================================================================
  # HIGH AVAILABILITY DATABASE NODES
  # ===================================================================

  # Primary coordinator with Patroni
  coordinator-primary:
    image: ${EXAPG_HA_IMAGE:-exapg:latest}
    container_name: ${CONTAINER_NAME:-exapg}-coordinator-primary
    hostname: coordinator-primary
    profiles:
      - ha
    environment:
      # Basic PostgreSQL settings
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-exadb}

      # Patroni configuration
      PATRONI_NAME: coordinator-primary
      PATRONI_SCOPE: exapg-coordinator
      PATRONI_ETCD_HOSTS: etcd:2379
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: coordinator-primary:8008
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: coordinator-primary:5432

      # HA specific settings
      PATRONI_BOOTSTRAP_INITDB_DATA_CHECKSUMS: "true"
      PATRONI_POSTGRESQL_USE_UNIX_SOCKET: "false"

      # Citus configuration
      CITUS_NODE_ROLE: coordinator

    volumes:
      - coordinator_primary_data:/var/lib/postgresql/data
      - ../../config/ha:/etc/patroni:ro
      - ../../config/postgresql:/etc/postgresql:ro

    ports:
      - "${COORDINATOR_PRIMARY_PORT:-5432}:5432"
      - "${COORDINATOR_PRIMARY_API_PORT:-8008}:8008"

    networks:
      - exapg-network

    depends_on:
      - etcd

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

    deploy:
      resources:
        limits:
          memory: ${COORDINATOR_MEMORY_LIMIT:-8G}
          cpus: '4.0'

  # Secondary coordinator (replica)
  coordinator-replica:
    image: ${EXAPG_HA_IMAGE:-exapg:latest}
    container_name: ${CONTAINER_NAME:-exapg}-coordinator-replica
    hostname: coordinator-replica
    profiles:
      - ha
      - replication
    environment:
      # Basic PostgreSQL settings
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-exadb}

      # Patroni configuration
      PATRONI_NAME: coordinator-replica
      PATRONI_SCOPE: exapg-coordinator
      PATRONI_ETCD_HOSTS: etcd:2379
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_RESTAPI_CONNECT_ADDRESS: coordinator-replica:8008
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: coordinator-replica:5432

      # Replica-specific settings
      PATRONI_BOOTSTRAP_METHOD: replica
      PATRONI_REPLICA_METHOD: basebackup

      # Citus configuration
      CITUS_NODE_ROLE: coordinator

    volumes:
      - coordinator_replica_data:/var/lib/postgresql/data
      - ../../config/ha:/etc/patroni:ro
      - ../../config/postgresql:/etc/postgresql:ro

    ports:
      - "${COORDINATOR_REPLICA_PORT:-5433}:5432"
      - "${COORDINATOR_REPLICA_API_PORT:-8009}:8008"

    networks:
      - exapg-network

    depends_on:
      - etcd
      - coordinator-primary

    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 90s

  # ===================================================================
  # LOAD BALANCING & CONNECTION POOLING
  # ===================================================================

  # HAProxy for load balancing and automatic failover
  haproxy:
    image: haproxy:2.8-alpine
    container_name: ${CONTAINER_NAME:-exapg}-haproxy
    hostname: haproxy
    profiles:
      - ha
      - lb
    ports:
      - "${HAPROXY_PORT:-5000}:5000"
      - "${HAPROXY_STATS_PORT:-8404}:8404"

    volumes:
      - ../../config/ha/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

    networks:
      - exapg-network

    depends_on:
      - coordinator-primary
      - coordinator-replica

    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8404/stats" ]
      interval: 30s
      timeout: 10s
      retries: 3

    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Connection pooler with pgBouncer
  pgbouncer:
    image: pgbouncer/pgbouncer:1.21.0
    container_name: ${CONTAINER_NAME:-exapg}-pgbouncer
    hostname: pgbouncer
    profiles:
      - ha
      - pooling
    environment:
      DATABASES_HOST: haproxy
      DATABASES_PORT: 5000
      DATABASES_USER: ${POSTGRES_USER:-postgres}
      DATABASES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      DATABASES_DBNAME: ${POSTGRES_DB:-exadb}

      POOL_MODE: ${PGBOUNCER_POOL_MODE:-transaction}
      MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN:-1000}
      DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE:-25}
      SERVER_RESET_QUERY: DISCARD ALL
      IGNORE_STARTUP_PARAMETERS: extra_float_digits

    ports:
      - "${PGBOUNCER_PORT:-6432}:6432"

    volumes:
      - ../../config/ha/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro

    networks:
      - exapg-network

    depends_on:
      - haproxy

    healthcheck:
      test: [ "CMD", "psql", "-h", "localhost", "-p", "6432", "-U", "${POSTGRES_USER:-postgres}", "-d", "pgbouncer", "-c", "SHOW STATS" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================================
  # CLUSTER INITIALIZATION & MANAGEMENT
  # ===================================================================

  # Simplified cluster setup
  ha-setup:
    image: ${EXAPG_HA_IMAGE:-exapg:latest}
    container_name: ${CONTAINER_NAME:-exapg}-ha-setup
    hostname: ha-setup
    profiles:
      - ha
      - setup
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-exadb}
      ETCD_HOST: etcd:2379
      PRIMARY_HOST: coordinator-primary
      REPLICA_HOST: coordinator-replica

    volumes:
      - ../../scripts/ha:/scripts/ha:ro
      - ../../sql:/sql:ro

    networks:
      - exapg-network

    depends_on:
      - etcd
      - coordinator-primary
      - coordinator-replica
      - haproxy

    restart: "no"

    command: >
      bash -c "
        echo 'Waiting for HA cluster to be ready...'
        sleep 60
        
        echo 'Setting up Citus cluster configuration...'
        /scripts/ha/setup-ha-cluster.sh
        
        echo 'Configuring automatic failover...'
        /scripts/ha/configure-failover.sh
        
        echo 'HA setup completed successfully!'
        tail -f /dev/null
      "

volumes:
  etcd_data:
    driver: local
  coordinator_primary_data:
    driver: local
  coordinator_replica_data:
    driver: local

# ===================================================================
# HA PROFILES AVAILABLE:
# ===================================================================
# ha:           Full HA stack (Primary + Replica + Load Balancer)
# replication:  Include replica nodes
# lb:           Load balancer only
# pooling:      Connection pooling only
# coordination: etcd only
# setup:        Include cluster setup service
# ===================================================================
