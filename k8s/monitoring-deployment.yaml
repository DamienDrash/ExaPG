---
# PostgreSQL Exporter Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exapg-postgres-exporter
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: postgres-exporter
    app.kubernetes.io/part-of: exapg-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: exapg
      app.kubernetes.io/component: postgres-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: exapg
        app.kubernetes.io/component: postgres-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: postgres-exporter
        image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
        ports:
        - name: http-metrics
          containerPort: 9187
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@exapg-coordinator.exapg.svc.cluster.local:5432/$(POSTGRES_DB)?sslmode=prefer"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: exapg-postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: exapg-postgres-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: exapg-postgres-secret
              key: POSTGRES_DB
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres_exporter/queries.yaml"
        - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
          value: ":9187"
        - name: PG_EXPORTER_LOG_LEVEL
          value: "info"
        
        volumeMounts:
        - name: queries-config
          mountPath: /etc/postgres_exporter
          readOnly: true
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9187
          initialDelaySeconds: 5
          periodSeconds: 10
      
      volumes:
      - name: queries-config
        configMap:
          name: exapg-monitoring-config
          items:
          - key: postgres-exporter-queries.yaml
            path: queries.yaml

---
# Service for PostgreSQL Exporter
apiVersion: v1
kind: Service
metadata:
  name: exapg-postgres-exporter
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: postgres-exporter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  ports:
  - name: http-metrics
    port: 9187
    targetPort: 9187
    protocol: TCP
  selector:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: postgres-exporter
  type: ClusterIP

---
# Node Exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: exapg-node-exporter
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: node-exporter
    app.kubernetes.io/part-of: exapg-monitoring
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: exapg
      app.kubernetes.io/component: node-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: exapg
        app.kubernetes.io/component: node-exporter
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        prometheus.io/path: "/metrics"
    spec:
      hostNetwork: true
      hostPID: true
      containers:
      - name: node-exporter
        image: quay.io/prometheus/node-exporter:v1.7.0
        args:
        - '--path.rootfs=/host'
        - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        - '--collector.netdev.device-exclude=^(veth|docker|br-).*'
        - '--web.listen-address=:9100'
        - '--web.telemetry-path=/metrics'
        - '--log.level=info'
        ports:
        - name: http-metrics
          containerPort: 9100
          protocol: TCP
        volumeMounts:
        - name: root
          mountPath: /host
          readOnly: true
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
      
      volumes:
      - name: root
        hostPath:
          path: /
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      
      tolerations:
      - operator: Exists

---
# Service for Node Exporter
apiVersion: v1
kind: Service
metadata:
  name: exapg-node-exporter
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: node-exporter
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9100"
    prometheus.io/path: "/metrics"
spec:
  ports:
  - name: http-metrics
    port: 9100
    targetPort: 9100
    protocol: TCP
  selector:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: node-exporter
  type: ClusterIP

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exapg-prometheus
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: prometheus
    app.kubernetes.io/part-of: exapg-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: exapg
      app.kubernetes.io/component: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: exapg
        app.kubernetes.io/component: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.1
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--storage.tsdb.retention.time=15d'
        - '--storage.tsdb.retention.size=10GB'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        - '--log.level=info'
        - '--query.max-concurrency=20'
        ports:
        - name: http
          containerPort: 9090
          protocol: TCP
        
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-data
          mountPath: /prometheus
        
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 10
      
      volumes:
      - name: prometheus-config
        configMap:
          name: exapg-monitoring-config
          items:
          - key: prometheus.yml
            path: prometheus.yml
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data

---
# PVC for Prometheus
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-data
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: prometheus
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi

---
# Service for Prometheus
apiVersion: v1
kind: Service
metadata:
  name: exapg-prometheus
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: prometheus
spec:
  ports:
  - name: http
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: prometheus
  type: ClusterIP

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exapg-grafana
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: grafana
    app.kubernetes.io/part-of: exapg-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: exapg
      app.kubernetes.io/component: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: exapg
        app.kubernetes.io/component: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.2
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: exapg-monitoring-secret
              key: GRAFANA_ADMIN_USER
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: exapg-monitoring-secret
              key: GRAFANA_ADMIN_PASSWORD
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: exapg-monitoring-secret
              key: GRAFANA_SECRET_KEY
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_USERS_ALLOW_ORG_CREATE
          value: "false"
        - name: GF_DATABASE_TYPE
          value: "sqlite3"
        - name: GF_DATABASE_PATH
          value: "/var/lib/grafana/grafana.db"
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
        - name: GF_ALERTING_ENABLED
          value: "true"
        - name: GF_UNIFIED_ALERTING_ENABLED
          value: "true"
        
        volumeMounts:
        - name: grafana-data
          mountPath: /var/lib/grafana
        - name: grafana-provisioning
          mountPath: /etc/grafana/provisioning
          readOnly: true
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 10
      
      volumes:
      - name: grafana-data
        persistentVolumeClaim:
          claimName: grafana-data
      - name: grafana-provisioning
        configMap:
          name: exapg-grafana-provisioning

---
# PVC for Grafana
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-data
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: grafana
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 10Gi

---
# Service for Grafana
apiVersion: v1
kind: Service
metadata:
  name: exapg-grafana
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: grafana
spec:
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: grafana
  type: ClusterIP

---
# Grafana Provisioning ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: exapg-grafana-provisioning
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: grafana-provisioning
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://exapg-prometheus:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: "5s"
        queryTimeout: "60s"
        httpMethod: "POST"
    - name: PostgreSQL
      type: postgres
      access: proxy
      url: exapg-coordinator.exapg.svc.cluster.local:5432
      database: exadb
      user: postgres
      secureJsonData:
        password: exapg_secure_password_123
      jsonData:
        sslmode: "prefer"
        maxOpenConns: 0
        maxIdleConns: 2
        connMaxLifetime: 14400

  dashboards.yml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards

---
# Alertmanager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: exapg-alertmanager
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: alertmanager
    app.kubernetes.io/part-of: exapg-monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: exapg
      app.kubernetes.io/component: alertmanager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: exapg
        app.kubernetes.io/component: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.26.0
        args:
        - '--config.file=/etc/alertmanager/alertmanager.yml'
        - '--storage.path=/alertmanager'
        - '--web.external-url=http://localhost:9093'
        - '--log.level=info'
        ports:
        - name: http
          containerPort: 9093
          protocol: TCP
        
        env:
        - name: ALERT_SMTP_USER
          valueFrom:
            secretKeyRef:
              name: exapg-monitoring-secret
              key: ALERT_SMTP_USER
        - name: ALERT_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: exapg-monitoring-secret
              key: ALERT_SMTP_PASSWORD
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: exapg-monitoring-secret
              key: SLACK_WEBHOOK_URL
        
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
          readOnly: true
        - name: alertmanager-data
          mountPath: /alertmanager
        
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 30
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 5
          periodSeconds: 10
      
      volumes:
      - name: alertmanager-config
        configMap:
          name: exapg-monitoring-config
          items:
          - key: alertmanager.yml
            path: alertmanager.yml
      - name: alertmanager-data
        persistentVolumeClaim:
          claimName: alertmanager-data

---
# PVC for Alertmanager
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-data
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: alertmanager
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 5Gi

---
# Service for Alertmanager
apiVersion: v1
kind: Service
metadata:
  name: exapg-alertmanager
  namespace: exapg
  labels:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: alertmanager
spec:
  ports:
  - name: http
    port: 9093
    targetPort: 9093
    protocol: TCP
  selector:
    app.kubernetes.io/name: exapg
    app.kubernetes.io/component: alertmanager
  type: ClusterIP 